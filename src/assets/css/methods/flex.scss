//=== 定义在父容器上的属性 =========
@mixin uf-dir($dir: column) {
  // row（默认值）：主轴为水平方向，起点在左端。
  // row-reverse：主轴为水平方向，起点在右端。
  // column：主轴为垂直方向，起点在上沿。
  // column-reverse：主轴为垂直方向，起点在下沿
  @include prefix('flex-direction', $dir);
}

@mixin uf-wrap($wrap: wrap) {
  // 默认情况下，项目都排在一条线（又称"轴线"）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。
  // nowrap(默认,不换行)
  // wrap(换行)
  // wrap-reverse(反转换行)
  @include prefix('flex-wrap', $wrap);
}

@mixin uf-jc($jc: center) {
  // justify-content属性定义了项目在主轴上(X)的对齐方式。
  // flex-start 默认值
  // flex-end
  // center
  // space-between 两端对齐，项目之间的间隔都相等
  // space-around 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。
  @include prefix('justify-content', $jc);
}

@mixin uf-ai($ai: stretch) {
  // align-items属性定义项目在交叉轴上如何对齐
  // flex-start
  // flex-end
  // center
  // baseline 项目的第一行文字的基线对齐
  // stretch (默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度
  @include prefix('align-items', $ai);
}

@mixin uf-ac($ac: stretch) {
  // 属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
  // 即设置flex-wrap: wrap;或flex-wrap: wrap-reverse;且换行
  // align-content: flex-start | flex-end | center | space-between | space-around | stretch;
  @include prefix('align-content', $ac);
}

@mixin uf-flex($n) {
  // flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选.
  // flex: none ==> 0 0 auto
  // flex: auto ==> 1 1 auto
  // flex: 2 ==> 2 1 0%，非负数值时，flex-basis取0%，数值作为flex-grow的值
  // flex: 2, 0 ==> 2 1 0%，两个非负数值时，flex-basis取0%，数值分别作为flex-grow与flex-shrink的值
  // flex: 2, 10% ==> 2 1 10%，两个非负数值时，flex-shrink取0%，分别作为flex-grow与flex-basis的值
  // flex: 30% ==> 1 1 30%，长度或百分比时，flex-grow取1，作为flex-basis的值
  @include prefix('flex', $n);
}

@mixin uf-grow($n) {
  // 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大
  @include prefix('flex-grow', $n);
}

@mixin uf-shrink($n) {
  // 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小
  // 如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。
  @include prefix('flex-shrink', $n);
}

@mixin uf-basis($n) {
  // 在分配空间之前,会优先分配固定的大小,当多余空间大于flex-basis的值时,保持不变,小于时,自动缩小,
  // 当同时设置width或height时 width或height无效
  @include prefix('flex-basis', $n);
}